name: Check Nix Updates

on:
  schedule:
    # Run every Monday at 09:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - 'flake.lock'
      - '.github/workflows/check-nix-updates.yml'
  pull_request:
    paths:
      - 'flake.lock'
      - 'flake.nix'

jobs:
  check-flake:
    name: Check Flake Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check flake
        uses: DeterminateSystems/flake-checker-action@v9
        with:
          fail-mode: false  # Don't fail the workflow, just report
          send-statistics: false  # Don't send telemetry

  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Check for updates manually
        run: |
          echo "🔍 Checking for Nix flake updates..."
          
          # Save current lock file
          cp flake.lock flake.lock.original
          
          # Try updating
          nix flake update
          
          # Check if anything changed
          if ! cmp -s flake.lock flake.lock.original; then
            echo "📦 Updates are available!"
            echo ""
            echo "### Available Updates:"
            echo ""
            
            # Show what inputs changed
            echo "#### Changed inputs:"
            OLD_NIXPKGS=$(jq -r '.nodes.nixpkgs.locked.rev' flake.lock.original 2>/dev/null | cut -c1-7)
            NEW_NIXPKGS=$(jq -r '.nodes.nixpkgs.locked.rev' flake.lock 2>/dev/null | cut -c1-7)
            if [ "$OLD_NIXPKGS" != "$NEW_NIXPKGS" ]; then
              echo "- nixpkgs: \`$OLD_NIXPKGS\` → \`$NEW_NIXPKGS\`"
            fi
            
            OLD_RUST=$(jq -r '.nodes["rust-overlay"].locked.rev' flake.lock.original 2>/dev/null | cut -c1-7)
            NEW_RUST=$(jq -r '.nodes["rust-overlay"].locked.rev' flake.lock 2>/dev/null | cut -c1-7)
            if [ "$OLD_RUST" != "$NEW_RUST" ] && [ "$OLD_RUST" != "null" ]; then
              echo "- rust-overlay: \`$OLD_RUST\` → \`$NEW_RUST\`"
            fi
            
            echo ""
            echo "### How to update:"
            echo '```bash'
            echo 'nix flake update'
            echo 'git add flake.lock'
            echo 'git commit -m "chore: update Nix flake dependencies"'
            echo '```'
            
            # Restore original
            mv flake.lock.original flake.lock
          else
            echo "✅ All Nix flake inputs are up to date!"
          fi

      - name: Test current flake
        run: |
          echo "🧪 Testing current flake configuration..."
          nix flake check
          echo "✅ Flake check passed"