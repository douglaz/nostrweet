name: Dependencies

on:
  schedule:
    # Run every Monday at 09:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-flake:
    name: Update Nix Flake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use a PAT to allow the workflow to trigger other workflows
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Update flake inputs
        run: nix flake update

      - name: Check if flake.lock changed
        id: check-changes
        run: |
          if git diff --quiet flake.lock; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Test with updated dependencies
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          nix develop -c just build
          nix develop -c just test

      - name: Create Pull Request
        if: steps.check-changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update Nix flake dependencies'
          title: 'chore: update Nix flake dependencies'
          body: |
            ## 🔄 Automated Dependency Update

            This PR updates the Nix flake dependencies to their latest versions.

            ### Changes
            - Updated `flake.lock` with latest nixpkgs and other inputs
            - All tests pass with the updated dependencies

            ### Testing
            - ✅ Build successful
            - ✅ All tests pass
            - ✅ Code quality checks pass

            This PR was automatically created by the dependency update workflow.
          branch: chore/update-nix-dependencies
          delete-branch: true
          draft: false

  audit-rust-deps:
    name: Audit Rust Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Install cargo-audit
        run: nix develop -c cargo install cargo-audit

      - name: Run security audit
        run: nix develop -c cargo audit --json > audit-results.json
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Check audit results and create issue
        run: |
          if nix develop -c cargo audit --deny warnings; then
            echo "✅ No security vulnerabilities found"
          else
            echo "⚠️ Security vulnerabilities detected"
            # Create a summary of vulnerabilities
            nix develop -c cargo audit --format json > audit.json || true
            if [ -f audit.json ] && [ -s audit.json ]; then
              echo "Security audit found vulnerabilities. Check the uploaded artifacts for details."
              # Here you could create a GitHub issue automatically if needed
            fi
          fi